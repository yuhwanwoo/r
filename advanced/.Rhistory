a
a <- sample(1:10,size = 5,replace = TRUE)
a
a <- sample(1:10,size = 5,replace = TRUE)
a
a <- sample(1:10,size = 5,replace = TRUE)
a
a <- sample(1:10,size = 5,replace = TRUE)
a
a <- sample(1:10,size = 5,replace = TRUE)
a
a <- sample(1:10,size = 5,replace = FALSE) #replace는 중복할것인지 아닌지
a
a <- sample(1:10,size = 5,replace = FALSE) #replace는 중복할것인지 아닌지
a
a
a
a
a
a
a
set.seed(1222) #1222는 key
a <- sample(1:10,size = 5,replace = FALSE) #replace는 중복할것인지 아닌지
a
a
set.seed(1222) #1222는 key
a <- sample(1:10,size = 5,replace = FALSE) #replace는 중복할것인지 아닌지
a
set.seed(1222) #1222는 key
a <- sample(1:10,size = 5,replace = FALSE) #replace는 중복할것인지 아닌지
a
set.seed(1222) #1222는 key
a <- sample(1:10,size = 5,replace = FALSE) #replace는 중복할것인지 아닌지
a
set.seed(1222) #1222는 key
a <- sample(1:10,size = 5,replace = FALSE) #replace는 중복할것인지 아닌지
a
set.seed(1222) #1222는 key
a <- sample(1:10,size = 5,replace = FALSE) #replace는 중복할것인지 아닌지
a
set.seed(1222) #1222는 key
a <- sample(1:10,size = 5,replace = FALSE) #replace는 중복할것인지 아닌지
a
set.seed(1222) #1222는 key
a <- sample(1:10,size = 5,replace = FALSE) #replace는 중복할것인지 아닌지
a
set.seed(1222) #1222는 key
a <- sample(1:10,size = 5,replace = FALSE) #replace는 중복할것인지 아닌지
a
set.seed(1222) #1222는 key
a <- sample(1:10,size = 5,replace = FALSE) #replace는 중복할것인지 아닌지
a
set.seed(1222) #1222는 key
a <- sample(1:10,size = 5,replace = FALSE) #replace는 중복할것인지 아닌지
a
set.seed(1222) #1222는 key
a <- sample(1:10,size = 5,replace = FALSE) #replace는 중복할것인지 아닌지
a
set.seed(121) #1222는 key
a <- sample(1:10,size = 5,replace = FALSE) #replace는 중복할것인지 아닌지
a
set.seed(1222) #1222는 key
a <- sample(1:10,size = 5,replace = FALSE) #replace는 중복할것인지 아닌지
a
#if문의 역할을 하는 함수 - ifelse
set.seed(1221)
ifdf <- data.frame(mynum=1:6,myval=sample(c("spring","bigdata","android"),size=6,replace = TRUE))
ifdf
#if문의 역할을 하는 함수 - ifelse
set.seed(1221)
ifdf <- data.frame(mynum=1:6,myval=sample(c("spring","bigdata"),size=6,replace = TRUE))
ifdf
ifdf
#myval의 값이 spring이면 프로젝트완료,bigdata이면 할꺼야
for (i in 1:nrow(ifdf)) {
if(ifdf[i,"myval"]=="spring"){
ifdf[i,"info"] <- "프로젝트완료"
}else{
ifdf[i,"info"] <- "할꺼야"
}
}
ifdf
#함수를 이용해서 - info2
ifdf[,"info2"] <- ifelse(test = ifdf$myval=="spring",yes="쉽다",no="할꺼다")
ifdf
set.seed(1222) #1222는 key
a <- sample(1:10,size = 5,replace = FALSE) #replace는 중복할것인지 아닌지
a
#if문의 역할을 하는 함수 - ifelse
set.seed(1221)
ifdf <- data.frame(mynum=1:6,myval=sample(c("spring","bigdata"),size=6,replace = TRUE))
ifdf
#myval의 값이 spring이면 프로젝트완료,bigdata이면 할꺼야
for (i in 1:nrow(ifdf)) {
if(ifdf[i,"myval"]=="spring"){
ifdf[i,"info"] <- "프로젝트완료"
}else{
ifdf[i,"info"] <- "할꺼야"
}
}
ifdf
#함수를 이용해서 - info2
ifdf[,"info2"] <- ifelse(test = ifdf$myval=="spring",yes="쉽다",no="할꺼다")
ifdf
set.seed(1222) #1222는 key
a <- sample(1:10,size = 5,replace = FALSE) #replace는 중복할것인지 아닌지
a
#if문의 역할을 하는 함수 - ifelse
set.seed(1221)
ifdf <- data.frame(mynum=1:6,myval=sample(c("spring","bigdata","android"),size=6,replace = TRUE))
ifdf
#myval의 값이 spring이면 프로젝트완료,bigdata이면 할꺼야
for (i in 1:nrow(ifdf)) {
if(ifdf[i,"myval"]=="spring"){
ifdf[i,"info"] <- "프로젝트완료"
}else{
ifdf[i,"info"] <- "할꺼야"
}
}
ifdf
#함수를 이용해서 - info2
ifdf[,"info2"] <- ifelse(test = ifdf$myval=="spring",yes="쉽다",no="할꺼다")
ifdf
#함수를 이용해서 - info3
ifdf[,"info3"] <- ifelse(test = ifdf$myval=="spring",yes="쉽다",no=ifelse(test = ifdf$myval=="bigdata",yes = "머신셋팅",no="device셋팅완료"))
ifdf
ifdf[,"info4"] <- "쉽다"
ifdf
#ggplot2패키지에서 제공되는 mpg데이터를 분석
####step1. mpg를 dataframe으로 변경####
dfmpg=as.data.frame(mpg)
dfmpg
####step2. mpg의 정보를 출력####
# 행 개수, 열의 개수, 위에서 10개, 끝에서 10개 출력
head(mpg,n=5)
tail(mpg,5)
####step3. mpg의 컬럼명을 변경####
#cty => city, hwy => highway
mpg1 <- rename(mpg,city=cty)
mpg1
####step4. 파생변수 생성하기####
# total컬럼을 추가 => cty와 hwy의 합
# avg컬럼을 추가 => cty와 hwy의 평균
mpg1$total <- as.numeric(mpg1$city+mpg1$hwy)
mpg1
mpg1$avg <- as.numeric(mpg1$total/2)
mpg1
####step5. 생성된 total을 가지고 요약정보 확인####
summary(mpg1)
####step6. info컬럼추가####
#total값을 이용해서 평가 - 20 이상이면 pass, fail
mpg1
####step7. grade컬럼 추가
#total값을 이용해서 평가 - 30 이상이면 A, 25이상이면 B, 20이상 C 나머지 D
mpg
####step6. info컬럼추가####
#total값을 이용해서 평가 - 20 이상이면 pass, fail
mpg1
mpg1
#ggplot2패키지에서 제공되는 mpg데이터를 분석
####step1. mpg를 dataframe으로 변경####
dfmpg=as.data.frame(mpg)
dfmpg
####step2. mpg의 정보를 출력####
# 행 개수, 열의 개수, 위에서 10개, 끝에서 10개 출력
#head(mpg,n=5)
#tail(mpg,5)
####step3. mpg의 컬럼명을 변경####
#cty => city, hwy => highway
mpg1 <- rename(mpg,city=cty)
mpg1
####step4. 파생변수 생성하기####
# total컬럼을 추가 => cty와 hwy의 합
# avg컬럼을 추가 => cty와 hwy의 평균
mpg1$total <- as.numeric(mpg1$city+mpg1$hwy)
mpg1
mpg1$avg <- as.numeric(mpg1$total/2)
mpg1
####step5. 생성된 total을 가지고 요약정보 확인####
summary(mpg1)
####step6. info컬럼추가####
#total값을 이용해서 평가 - 20 이상이면 pass, fail
mpg1
####step7. grade컬럼 추가
#total값을 이용해서 평가 - 30 이상이면 A, 25이상이면 B, 20이상 C 나머지 D
#ggplot2패키지에서 제공되는 mpg데이터를 분석
####step1. mpg를 dataframe으로 변경####
dfmpg=as.data.frame(mpg)
dfmpg
####step2. mpg의 정보를 출력####
# 행 개수, 열의 개수, 위에서 10개, 끝에서 10개 출력
head(mpg,n=5)
tail(mpg,5)
####step3. mpg의 컬럼명을 변경####
#cty => city, hwy => highway
mpg1 <- rename(mpg,city=cty)
mpg1
####step4. 파생변수 생성하기####
# total컬럼을 추가 => cty와 hwy의 합
# avg컬럼을 추가 => cty와 hwy의 평균
mpg1$total <- as.numeric(mpg1$city+mpg1$hwy)
mpg1
mpg1$avg <- as.numeric(mpg1$total/2)
mpg1
####step5. 생성된 total을 가지고 요약정보 확인####
summary(mpg1)
####step6. info컬럼추가####
#total값을 이용해서 평가 - 20 이상이면 pass, fail
mpg1
####step7. grade컬럼 추가
#total값을 이용해서 평가 - 30 이상이면 A, 25이상이면 B, 20이상 C 나머지 D
####step6. info컬럼추가####
#total값을 이용해서 평가 - 20 이상이면 pass, fail
mpg1[,"info"] <- ifelse(test = mpg1$total>=20,yes = "pass",no="fail")
mpg1
mpg1[,"info"] <- ifelse(test = mpg1$total>=30,yes = "pass",no="fail")
mpg
####step7. grade컬럼 추가
#total값을 이용해서 평가 - 30 이상이면 A, 25이상이면 B, 20이상 C 나머지 D
mpg1$total <- as.numeric(mpg1$city+mpg1$hwy)
mpg1
mpg1$avg <- as.numeric(mpg1$total/2)
mpg1
####step5. 생성된 total을 가지고 요약정보 확인####
summary(mpg1)
####step6. info컬럼추가####
#total값을 이용해서 평가 - 20 이상이면 pass, fail
mpg1[,"info"] <- ifelse(test = mpg1$total>=30,yes = "pass",no="fail")
mpg
####step7. grade컬럼 추가
#total값을 이용해서 평가 - 30 이상이면 A, 25이상이면 B, 20이상 C 나머지 D
mpg
mpg1 <- rename(mpg,city=cty)
mpg1
####step4. 파생변수 생성하기####
# total컬럼을 추가 => cty와 hwy의 합
# avg컬럼을 추가 => cty와 hwy의 평균
mpg1$total <- as.numeric(mpg1$city+mpg1$hwy)
mpg1
mpg1$avg <- as.numeric(mpg1$total/2)
mpg1
####step5. 생성된 total을 가지고 요약정보 확인####
summary(mpg1)
####step6. info컬럼추가####
#total값을 이용해서 평가 - 20 이상이면 pass, fail
mpg1[,"info"] <- ifelse(test = mpg1$total>=20,yes = "pass",no="fail")
mpg
####step7. grade컬럼 추가
#total값을 이용해서 평가 - 30 이상이면 A, 25이상이면 B, 20이상 C 나머지 D
#ggplot2패키지에서 제공되는 mpg데이터를 분석
####step1. mpg를 dataframe으로 변경####
dfmpg=as.data.frame(mpg)
dfmpg
####step2. mpg의 정보를 출력####
# 행 개수, 열의 개수, 위에서 10개, 끝에서 10개 출력
head(mpg,n=5)
tail(mpg,5)
####step3. mpg의 컬럼명을 변경####
#cty => city, hwy => highway
mpg1 <- rename(mpg,city=cty)
mpg1
####step4. 파생변수 생성하기####
# total컬럼을 추가 => cty와 hwy의 합
# avg컬럼을 추가 => cty와 hwy의 평균
mpg1$total <- as.numeric(mpg1$city+mpg1$hwy)
mpg1
mpg1$avg <- as.numeric(mpg1$total/2)
mpg1
####step5. 생성된 total을 가지고 요약정보 확인####
summary(mpg1)
####step6. info컬럼추가####
#total값을 이용해서 평가 - 20 이상이면 pass, fail
mpg1[,"info"] <- ifelse(test = mpg1$total>=20,yes = "pass",no="fail")
mpg
####step7. grade컬럼 추가
#total값을 이용해서 평가 - 30 이상이면 A, 25이상이면 B, 20이상 C 나머지 D
mpg1[,"grade"] <- ifelse(test = mpg1$total>=40)
#ggplot2패키지에서 제공되는 mpg데이터를 분석
####step1. mpg를 dataframe으로 변경####
dfmpg=as.data.frame(mpg)
dfmpg
####step2. mpg의 정보를 출력####
# 행 개수, 열의 개수, 위에서 10개, 끝에서 10개 출력
head(mpg,n=5)
tail(mpg,5)
####step3. mpg의 컬럼명을 변경####
#cty => city, hwy => highway
mpg1 <- rename(mpg,city=cty)
mpg1
####step4. 파생변수 생성하기####
# total컬럼을 추가 => cty와 hwy의 합
# avg컬럼을 추가 => cty와 hwy의 평균
mpg1$total <- as.numeric(mpg1$city+mpg1$hwy)
mpg1
mpg1$avg <- as.numeric(mpg1$total/2)
mpg1
####step5. 생성된 total을 가지고 요약정보 확인####
summary(mpg1)
####step6. info컬럼추가####
#total값을 이용해서 평가 - 20 이상이면 pass, fail
mpg1[,"info"] <- ifelse(test = mpg1$total>=20,yes = "pass",no="fail")
mpg
####step7. grade컬럼 추가
#total값을 이용해서 평가 - 30 이상이면 A, 25이상이면 B, 20이상 C 나머지 D
#ggplot2패키지에서 제공되는 mpg데이터를 분석
####step1. mpg를 dataframe으로 변경####
dfmpg=as.data.frame(mpg)
dfmpg
####step2. mpg의 정보를 출력####
# 행 개수, 열의 개수, 위에서 10개, 끝에서 10개 출력
head(mpg,n=5)
tail(mpg,5)
####step3. mpg의 컬럼명을 변경####
#cty => city, hwy => highway
mpg1 <- rename(mpg,city=cty)
mpg1
####step4. 파생변수 생성하기####
# total컬럼을 추가 => cty와 hwy의 합
# avg컬럼을 추가 => cty와 hwy의 평균
mpg1$total <- as.numeric(mpg1$city+mpg1$hwy)
mpg1
mpg1$avg <- as.numeric(mpg1$total/2)
mpg1
####step5. 생성된 total을 가지고 요약정보 확인####
summary(mpg1)
####step6. info컬럼추가####
#total값을 이용해서 평가 - 20 이상이면 pass, fail
mpg1[,"info"] <- ifelse(test = mpg1$total>=20,yes = "pass",no="fail")
mpg1
####step7. grade컬럼 추가
#total값을 이용해서 평가 - 30 이상이면 A, 25이상이면 B, 20이상 C 나머지 D
#ggplot2패키지에서 제공되는 mpg데이터를 분석
####step1. mpg를 dataframe으로 변경####
dfmpg=as.data.frame(mpg)
dfmpg
####step2. mpg의 정보를 출력####
# 행 개수, 열의 개수, 위에서 10개, 끝에서 10개 출력
head(mpg,n=5)
tail(mpg,5)
####step3. mpg의 컬럼명을 변경####
#cty => city, hwy => highway
mpg1 <- rename(mpg,city=cty)
mpg1
####step4. 파생변수 생성하기####
# total컬럼을 추가 => cty와 hwy의 합
# avg컬럼을 추가 => cty와 hwy의 평균
mpg1$total <- as.numeric(mpg1$city+mpg1$hwy)
mpg1
mpg1$avg <- as.numeric(mpg1$total/2)
mpg1
####step5. 생성된 total을 가지고 요약정보 확인####
summary(mpg1)
####step6. info컬럼추가####
#total값을 이용해서 평가 - 30 이상이면 pass, fail
mpg1[,"info"] <- ifelse(test = mpg1$total>=30,yes = "pass",no="fail")
mpg1
####step7. grade컬럼 추가
#total값을 이용해서 평가 - 30 이상이면 A, 25이상이면 B, 20이상 C 나머지 D
####step7. grade컬럼 추가
#total값을 이용해서 평가 - 40 이상이면 A, 35이상이면 B, 30이상 C 나머지 D
mpg1[,"grade"] <- ifelse(test = mpg1$total>=40,yes ="A",no=ifelse(test=mpg1$total>=35,yes = "B",no=ifelse(test = mpg1$total>=30,yes = "C",no="D")))
mpg1
table(exam$eng)
qplot(exam$eng)
#수치형 변수
#정수 - integer(int),R에서 다루는 모든 숫자 - numeric
num1=10
class(num1)
num2=10L
class(num2)
result <- num1
result <- num1+num2
class(result)
data(package="math") #R내부의 샘플데이터셋을 가져오기
data(package="MASS") #R내부의 샘플데이터셋을 가져오기
library(MASS)
data("Boston")
head(Boston)
colnames(Boston)
t(colnames(Boston))
t(t)colnames(Boston)))
t(t(colnames(Boston)))
df <- head(Boston[,1:7])
df
#반복 작업을 할때 사용할 수 있도록 함수를 지원
#margin=1 : 행방향, 2 : 열방향
df[,"total"] <- apply(x=df,MARGIN = 1,FUN = "sum")
#반복 작업을 할때 사용할 수 있도록 함수를 지원
#margin=1 : 행방향, 2 : 열방향
df[,"total"] <- apply(X = df,MARGIN = 1,FUN = "sum")
df
df[,"avg"] <- apply(X = df,MARGIN = 1,FUN = "mean")
df
apply(X=df, MARGIN = 2,FUN = "sum")
round(apply(X=df,MARGIN = 2,FUN = "mean"),4)
#apply의 margin속성을 2로 정의한것이랑 똑같아
sapply(x=df,FUN = "mean")
#apply의 margin속성을 2로 정의한것이랑 똑같아
sapply(X=df,FUN = "mean")
round(apply(X=df, MARGIN = 2,FUN = "sum"),4)
round(apply(X=df,MARGIN = 2,FUN = "mean"),4)
#apply의 margin속성을 2로 정의한것이랑 똑같아
apply(X=df,MARGIN = 2,FUN = "mean")
sapply(X=df,FUN = "mean")
t(t(sapply(X=df,FUN = "class")))
#주어진 데이터에서 원하는 데이터만 추출
#dplyr은 문자열에 대한 작업에 특화된 기능이 많은 패키지
#C++로 구현되어 있어 가장 빠르다.
#dplyr라이브러리는 실행할 때 코드 전체를 범위지정해서 실행
library("dplyr")
data("airquality")
head(airquality)
df2
df2 <- airquality
df2
#필터링 - 벡터연산
df2[,1:4]
df2_data1 <- df2[1:5,]
df2_data1
df2[df2$Day==1,]
df2[df2$Day!=1,]
df2[df2$Day<=2,]
df2[df2$Day==1 & df2$Day2,]
df2[df2$Day==1 | df2$Day2,]
df2[df2$Day==1 | df2$Day2,]
df2[df2$Day==1 & df2$Day2==2,]
df2[df2$Day==1 | df2$Day2==2,]
df2[df2$Day==1 & df2$Day==2,]
df2[df2$Day==1 | df2$Day==2,]
sum(df2$Day %in% 1:2)
df2_data2=df2[df2$Day %in$ 1:2,]
df2_data2=df2[df2$Day %in% 1:2,]
nrow(df2_data2)
#dplyr패키지에서 지원하는 필터관련 함수
filter(df2,day==1 & Month==5)
#dplyr패키지에서 지원하는 필터관련 함수
filter(df2,Day==1 & Month==5)
filter(df2,Day %in% c(1,3,5))
library("dplyr")
exam <- read.csv("csv_exam.csv")
exam
exam %>%
filter(class==1) %>%
filter(math>50)
exam %>%
filter(class==1) %>%
filter(math>50)
#select
exam %>% select(-math)
#arrange
exam %>% arrange(id)
exam %>% arrange(desc(id))
exam %>% select(id,math,eng)
exam %>% select(id,math,english)
exam %>%
filter(class==1) %>%
select(id,math,science)
exam %>% arrange(class,english)
exam %>% arrange(id)
exam %>% arrange(desc(id))
exam %>% arrange(class,english)
exam %>% arrange(class,desc(english))
exam %>%
mutate(total=math+english+science,mean=total/3 )
exam %>%
mutate(total=math+english+science,mean=total/3 ,info=ifelse(science>=70,"통과","재시험")) %>%
exam %>%
mutate(total=math+english+science,mean=total/3 ,info=ifelse(science>=70,"통과","재시험")) %>%
exam
exam %>%
mutate(total=math+english+science,mean=total/3 ,info=ifelse(science>=70,"통과","재시험")) %>%
exam
exam %>%
mutate(total=math+english+science,mean=total/3 ,info=ifelse(science>=70,"통과","재시험")) %>%
exam
exam %>%
mutate(total=math+english+science,mean=total/3 ,info=ifelse(science>=70,"통과","재시험"))
exam %>%
group_by(class) %>%
summarise(math_sum=sum(math),math_mean=mean(math),meath_median=median(math),math_count=n())
exam %>%
group_by(class) %>%
summarise(math_sum=sum(math),math_mean=mean(math),meath_median=median(math),math_count=n())
test1 <- data.frame(id=c(1,2,3,4,5),midjum=c(77,56,99,100,99))
test2 <- data.frame(id=c(1,2,3,4,5),final_jumsu=c(77,56,99,100,99))
test2 <- data.frame(id=c(1,2,3,4,5),final_jumsu=c(77,56,99,100,99))
test1
test2
final_data <- left_join(test1,test2,by="id")
final_data
namedata <- data.frame(class=c(1,2,3,4,5),teacher=c("kim","lee","park","jang","hong"))
str(namedata)
exam
exam_new <- left_join(exam,examdata,by="class")
exam_new <- left_join(exam,namedata,by="class")
exam_new
groupA <- data.frame(id=c(1,2,3,4,5),mid_jumsu=c(77,56,99,100,99))
groupB <- data.frame(id=c(6,7,8,9,10),mid_jumsu=c(77,56,99,100,99))
group_total <- bind_rows(groupA,groupB)
group_total
mpg2 <- mpg
mpg2
#mutate - 파생변수 추가하기(원본에 없는 컬럼 추가)
exam %>% mutate(total=math+english+science) %>%
head()
mpg2 %>% group_by(class) %>% summarise(avg_cty=mean(cty))
mpg2 %>% group_by(class) %>% summarise(avg_cty=mean(cty)) %>% arrange(desc(avg_cty))
mpg2 %>% group_by(manufacturer) %>% summarise(hwy_avg=mean(hwy)) %>% arrange(desc(hwy_avg)).head(3)
mpg2 %>% group_by(manufacturer) %>% summarise(hwy_avg=mean(hwy)) %>% arrange(desc(hwy_avg)) %>% head(3)
mpg2 %>% filter(class="compact")
mpg2 %>% filter(class=="compact")
mpg2 %>% filter(class=="compact") %>% group_by(manufacturer)
