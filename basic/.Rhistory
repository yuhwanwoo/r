numlist2 <- seq(1,10,by=2)
numlist2
v1 <- c(70,80,90,100)
names(v1) #names는 벡터의 이름을 출력력
names(v1) <- c("국어","수학","영어","자바")
v1
length(v1) #요소의 개수를 리턴턴
mean(v1) #평균리턴턴
max(v1) #최대값값
min(v1) #최소값값
#행렬
matrix(1:15)
? matrix
mymat1 <- matrix(1:15,ncol = 3)
mymat1
mymat1 <- matrix(1:15,ncol = 3,byrow = T)
mymat1
#matrix에서 원하는 값을 추출하기
mymat1[2,2] #행,열열
mymat1[3,3]
mymat1[1,c(1:3)]
mymat1[1,] #1행의 모든열
mymat1[,1] #1열의 모든값값
#1행과 3행을 뺀 데이터
mymat1[c(1,3),]
#미니실습1 - 2행부터 4행까지 출력(단,2번,3번컬럼만)
mymat1[2:4,c(2,3)]
addmymat1 <- cbind(mymat1,c(1,1,11,111,1111))
addmymat1
addmymat1 <- cbind(mymat1,c(1,11,111,1111))
addmymat1
#cbind는 컬럼을 추가하는 함수 - 값이 부족하면 맨 앞의 같이 채워진다.
addmymat1 <- cbind(mymat1,c(1,11,111,1111))
addmymat1
addmymat1
addmymat2 <- rbind(mymat1,c(1,11,111,1111))
addmymat2
colnames(mymat1) <- c("a","b","c")
mymat1
rownames(mymat1) <- c("r1,"r2,"r3","r4","r5")
rownames(mymat1) <- c("r1,"r2"","r3","r4","r5")
rownames(mymat1) <- c("r1,"r2","r3","r4","r5")
rownames(mymat1) <- c("r1","r2","r3","r4","r5")
mymant1
mymat1
exammat <- matrix(80,90,70,700,80,99,78,72,90,78,82,78,99,89,78,90,ncol = 4)
exammat <- matrix(80,90,70,70,80,99,78,72,90,78,82,78,99,89,78,90,ncol = 4)
exammat <- matrix(c(80,90,70,70,80,99,78,72,90,78,82,78,99,89,78,90),ncol = 4)
exammat
exammat <- matrix(c(80,80,90,99,90,99,78,89,70,78,82,78,100,72,78,90),ncol = 4)
exammat
colnames(exammat) <- c("국어","영어","과학","수학")
rownames(exammat) <- c("kim","lee","hong","jang")
exammat
avgname=mean(exammat[1,c(1:4)])
avgname
avgname=matrix(c(mean(exammat[1,c(1:4)],mean(exammat[2,c(1:4)],mean(exammat[3,c(1:4)],mean(exammat[4,c(1:4)]))
avgname
avgname=matrix(c(mean(exammat[1,c(1:4)],mean(exammat[2,c(1:4)],mean(exammat[3,c(1:4)],mean(exammat[4,c(1:4)])))
avgname=matrix(c(mean(exammat[1,c(1:4)],mean(exammat[2,c(1:4)],mean(exammat[3,c(1:4)],mean(exammat[4,c(1:4)]),ncol=4)
avgname=matrix(c(mean(exammat[1,c(1:4)],mean(exammat[2,c(1:4)],mean(exammat[3,c(1:4)],mean(exammat[4,c(1:4)])),ncol=4)
avgname=matrix(c(mean(exammat[1,c(1:4)]),mean(exammat[2,c(1:4)]),mean(exammat[3,c(1:4)]),mean(exammat[4,c(1:4)])),ncol=4)
avgname
avname=matrix(c(mean(exammat[1,c(1:4)]),mean(exammat[2,c(1:4)]),mean(exammat[3,c(1:4)]),mean(exammat[4,c(1:4)])),ncol=4)
avname
avname=matrix(c(mean(exammat[c(1:4),1]),mean(exammat[c(1:4),2]),mean(exammat[c(1:4),3]),mean(exammat[c(1:4),4])),ncol=4
avsubj=matrix(c(mean(exammat[c(1:4),1]),mean(exammat[c(1:4),2]),mean(exammat[c(1:4),3]),mean(exammat[c(1:4),4])),ncol=4)
avsubj=matrix(c(mean(exammat[c(1:4),1]),mean(exammat[c(1:4),2]),mean(exammat[c(1:4),3]),mean(exammat[c(1:4),4])),ncol=4)
avsubj
exammat <- matrix(c(80,80,90,99,90,99,78,89,70,78,82,78,100,72,78,90),ncol = 4)
exammat
colnames(exammat) <- c("국어","영어","과학","수학")
rownames(exammat) <- c("kim","lee","hong","jang")
exammat
avname=matrix(c(mean(exammat[1,c(1:4)]),mean(exammat[2,c(1:4)]),mean(exammat[3,c(1:4)]),mean(exammat[4,c(1:4)])),ncol=4)
avname
avsubj=matrix(c(mean(exammat[c(1:4),1]),mean(exammat[c(1:4),2]),mean(exammat[c(1:4),3]),mean(exammat[c(1:4),4])),ncol=4)
avsubj
myjumsuMat <- matrix(c(80,90,70,100,80,99,78,72,90,78,82,78,99,89,78,90),nrow = 4,byrow = T)
myjumsuMat
dataframeMat1 <- matrix(1:15,ncol = 3,byrow = T)
dataframeMat1
dataframeMat2 <- data.frame(dataframeMat1)
dataframeMat2
mydataframe <- data.frame(dataframeMat1)
mydataframe
dataframeMat1[,1]
mydataframe[,1]
#matrix로 정의된 데이터를 dataframe으로 변경하여 작업하는 경우가 많음
#matrix의 1열만 char타입으로 변경
dataframeMat1[,1] <-  as.character(dataframeMat1[,1])
dataframeMat1
#str함수는 dataframe내부의 데이터형을 볼 수 있는함수
str(mydataframe)
mydataframe[,1] <- as.character(mydataframe[,1])
str(mydataframe)
mydataframe
mydataframe$X1 #$를 이용해서 열의 이름을 접근할 수 있다.
mydataframe$X2
mydataframe$X3
#dataframe에 열을 추가
col4 <- c(1,1,1,1,1)
mydataframe$X4 <- col4
mydataframe
#필요한 곳에서 dataframe을 다시 matrix로 변환
dataframeMat2 <- as.matrix(mydataframe)
dataframeMat2
math <- c(100,99,100)
mydf1 <- data.frame(eng,math)
mydf1
eng <- c(100,99,90)
math <- c(100,99,100)
mydf1 <- data.frame(eng,math)
mydf1
mean(mydf1$eng)
mean(mydf1$math)
#3. dataframe을 직접 정의
mydf2 <- data.frame(eng=c(100,100,100),m=c(90,90,90))
mydf2
#생성이 완료되어 사용중인 matrix,dataframe의 행과 열을 변경
m <- matrix(1:15,ncol = 3,byrow = T)
m
m <- t(m)
d <- data.frame(m)
d
d <- t(d)
d
myex=data.frame("가격"=c(1800,1500,3000),"판매량"=c(24,38,13))
myex
? row.names
myex=data.frame("가격"=c(1800,1500,3000),"판매량"=c(24,38,13),row.names("사과",딸기","수박"))
num <- 88
if(num>=90){
print("합격")
}else{
print("다시")
}
if(num>=90){
print("수")
}else if(num>=80){
print("우")
}else{
print("다시")
}
myv <- c(1:10)
for(i in myv){
print(i)
}
sum
for(i in myv){
sum=+i
}
sum
sum=i+sum
for(i in myv){
sum=i+sum
}
sum
for(i in myv){
sum=i+sum
}
sum
sum <- 0
for(i in myv){
sum=i+sum
}
sum
sum <- 0
for(i in myv){
sum <- i+sum
}
sum
print(sum)
sum <- 0
for(i in myv){
sum = i+sum
}
print(sum)
#1부터 10까지 합구하기 - ver2
myv2 <- c(1:100)
sum(myv2)
#csv는 기본 패키지로 사용가능
#csv를 읽기
mdf=read.csv("csv_exam.csv")
mdf
mdf <- read.csv("csv_exam.csv")
mdf
mdf[2,]
#dataframe에서 조건에 만족하는 데이터를 조회
m <- matrix(1:20,ncol=4)
m
d <- data.frame(m)
d
myresult
myresult
m <- matrix(1:20,ncol=4)
m
d <- data.frame(m)
d
myresult <- d[d$X3>=13,]
myresult
#조건에 만족하는 데이터를 result.csv파일로 저장
write.csv(myresult,file = "result.csv")
mdf1 <- read.csv("csv_exam.csv")
mdf1
mdf1[2,]
myres <- mdf1[mdf1$science>=80,]
myres
sum(myres[1,])
sum(myres[2,])
sum(myres[1,])
sum(myres$math,myres$english,myres$science)
for (i in myres) {
mytotal=sum(myres$math,myres$english,myres$science)
print(mytotal)
}
for (i in myres) {
mytotal[i,]=sum(myres$math,myres$english,myres$science)
print(mytotal)
}
for (i in myres) {
print(myres[i,])
}
myres
mdf1 <- read.csv("csv_exam.csv")
myres <- mdf1[mdf1$science>=80,]
sum(myres$math,myres$english,myres$science)
for (i in myres) {
total=(sum(myres[i,myres$math],myres[i,myres$english],myres[i,myres$science]))
myres$X5=total
}
myres
for (i in myres) {
total=(sum(myres[6,myres$math],myres[i,myres$english],myres[i,myres$science]))
myres$X5=total
}
myres
for (i in myres) {
total=(sum(myres[1,myres$math],myres[i,myres$english],myres[i,myres$science]))
myres$X5=total
}
myres
myres[i,myres$math]
mdf1 <- read.csv("csv_exam.csv")
myres <- mdf1[mdf1$science>=80,]
sum(myres$math,myres$english,myres$science)
myres[i,myres$math]
myres[1,myres$math]
myres[1,myres$math]
myres[myres$math]
myres[6,myres$math]
sum
for (i in myres) {
for (j in myres) {
sum=myres[i,j]
}
}
sum
myres <- mdf1[mdf1$science>=80,]
for (i in myres) {
for (j in myres) {
sum=myres[i,j]
}
}
sum
myres
}
myres
for (i in myres) {
for (j in myres) {
sum=myres[i,j]
}
}
sum
for (i in myres) {
for (j in myres) {
print(myres[i,j])
}
}
sum
for (i in myres) {
for (j in myres) {
print(myres[i,j])
}
}
myres <- mdf1[mdf1$science>=80,]
myres
for (i in myres) {
for (j in myres) {
print(myres[i,j])
}
}
for (i in myres) {
myres[i,]
}
myres
for (i in myres) {
myres[i,]
}
sum
myres
for (i in myres) {
myres[i,]
}
myres
for (i in myres) {
myres[i,]
}
myres[1,]
myres
length(myres)
matrix(1:length(myres))
myres
s <- matrix(1:length(myres))
for (i in s) {
myres[i,i]
}
for (i in s) {
myres[i,i]
}
for (i in s) {
print(myres[i,i])
}
sum(1,-c(1,2))
myres <- mdf1[mdf1$science>=80,]
myres
sum(1,-c(1,2))
sum(myres[1,-c(1,2)])
myres
sum(myres[1,-c(1,2)])
sum(myres[2,-c(1,2)])
sum(myres[3,-c(1,2)])
for (i in length(myres)) {
}
myres
for (i in length(myres)) {
print(i)
}
myres
for (i in length(myres)) {
print(i)
}
myres
a <- matrix(1:length(myres))
for (i in a ){
print(i)
}
myres
a <- matrix(1:length(myres[1]))
for (i in a ){
print(i)
}
myres
a <- matrix(1:length(myres[1,]))
for (i in a ){
print(i)
}
a <- matrix(1:length(myres[length(myres),]))
for (i in a ){
print(i)
}
myres
a <- matrix(1:length(myres[length(myres)]))
for (i in a ){
print(i)
}
myres
a <- matrix(1:length(myres[,length(myres)]))
for (i in a ){
print(i)
}
for (i in a ){
total=c(sum(myres[1,-c(1,2)]),sum(myres[2,-c(1,2)]),sum(myres[3,-c(1,2)]))
}
total
myres
a <- matrix(1:length(myres[,length(myres)]))
for (i in a ){
#total=c(sum(myres[1,-c(1,2)]),sum(myres[2,-c(1,2)]),sum(myres[3,-c(1,2)]))
total=c(sum(myres[i,-c(1,2)]))
}
total
myres
a <- matrix(1:length(myres[,length(myres)]))
for (i in a ){
#total=c(sum(myres[1,-c(1,2)]),sum(myres[2,-c(1,2)]),sum(myres[3,-c(1,2)]))
total=c(sum(myres[i,-c(1,2)]))
}
mdf1 <- read.csv("csv_exam.csv")
myres <- mdf1[mdf1$science>=80,]
myres
a <- matrix(1:length(myres[,length(myres)]))
for (i in a ){
#total=c(sum(myres[1,-c(1,2)]),sum(myres[2,-c(1,2)]),sum(myres[3,-c(1,2)]))
total=c(sum(myres[i,-c(1,2)]))
}
mdf1 <- read.csv("csv_exam.csv")
myres <- mdf1[mdf1$science>=80,]
myres
a <- matrix(1:length(myres[,length(myres)]))
for (i in a ){
#total=c(sum(myres[1,-c(1,2)]),sum(myres[2,-c(1,2)]),sum(myres[3,-c(1,2)]))
total=c(sum(myres[i,-c(1,2)]))
}
total
#행렬
matrix(1:15)
? matrix
mymat1 <- matrix(1:15,ncol = 3) #3열로 작성
mymat1
# 1부터 15까지의 값을 3개의 열로 표현,row방향으로 값을 추가
mymat1 <- matrix(1:15,ncol = 3,byrow = T)
mymat1
#matrix에서 원하는 값을 추출하기
mymat1[2,2] #행,열열
mymat1[3,3]
mymat1[1,c(1:3)]
mymat1[1,] #1행의 모든열열
mymat1[,1] #1열의 모든값값
#1행과 3행을 뺀 데이터
mymat1[-c(1,3),]
#미니실습1 - 2행부터 4행까지 출력(단,2번,3번컬럼만)
mymat1[2:4,c(2,3)]
#cbind는 컬럼을 추가하는 함수 - 값이 부족하면 맨 앞의 같이 채워진다.
addmymat1 <- cbind(mymat1,c(1,11,111,1111))
addmymat1
addmymat2 <- rbind(mymat1,c(1,11,111,1111))
addmymat2
myres
a <- matrix(1:length(myres[,length(myres)]))
for (i in a ){
#total=c(sum(myres[1,-c(1,2)]),sum(myres[2,-c(1,2)]),sum(myres[3,-c(1,2)]))
total=rbind(c(sum(myres[i,-c(1,2)])))
}
total
myres
a <- matrix(1:length(myres[,length(myres)]))
for (i in a ){
#total=c(sum(myres[1,-c(1,2)]),sum(myres[2,-c(1,2)]),sum(myres[3,-c(1,2)]))
total=rbind(sum(myres[i,-c(1,2)]))
}
total
myres
a <- matrix(1:length(myres[,length(myres)]))
for (i in a ){
#total=c(sum(myres[1,-c(1,2)]),sum(myres[2,-c(1,2)]),sum(myres[3,-c(1,2)]))
total=rbind(sum(myres[i,-c(1,2)]))
}
mdf1 <- read.csv("csv_exam.csv")
myres <- mdf1[mdf1$science>=80,]
myres
a <- matrix(1:length(myres[,length(myres)]))
for (i in a ){
#total=c(sum(myres[1,-c(1,2)]),sum(myres[2,-c(1,2)]),sum(myres[3,-c(1,2)]))
total <- rbind(sum(myres[i,-c(1,2)]))
}
total
myres
a <- matrix(1:length(myres[,length(myres)]))
for (i in a ){
#total=c(sum(myres[1,-c(1,2)]),sum(myres[2,-c(1,2)]),sum(myres[3,-c(1,2)]))
total <- cbind(sum(myres[i,-c(1,2)]))
}
total
mdf1 <- read.csv("csv_exam.csv")
myres <- mdf1[mdf1$science>=80,]
myres
a <- matrix(1:length(myres[,length(myres)]))
for (i in a ){
#total=c(sum(myres[1,-c(1,2)]),sum(myres[2,-c(1,2)]),sum(myres[3,-c(1,2)]))
total <- cbind(sum(myres[i,-c(1,2)]))
}
total
mydata <- read.csv("csv_exam.csv")
mydata
mydayaResult <- mydata[mydata$science>=80]
mydayaResult <- mydata[mydata$science>=80,]
mydataframe
mydata <- read.csv("csv_exam.csv")
mydata
mydataResult <- mydata[mydata$science>=80,]
mydataResult
mydataResult$mytotal <- as.numeric(mydataResult$math+mydataResult$english+mydataResult$science)
mydataResult
mydataResult$myavg <- as.numeric(mydataResult$mytotal/3)
mydataResult
write.csv(mydataResult,file="result2.csv")
#행렬
matrix(1:15)
? matrix
mymat1 <- matrix(1:15,ncol = 3) #3열로 작성
mymat1
# 1부터 15까지의 값을 3개의 열로 표현,row방향으로 값을 추가
mymat1 <- matrix(1:15,ncol = 3,byrow = T)
mymat1
#matrix에서 원하는 값을 추출하기
mymat1[2,2] #행,열열
mymat1[3,3]
mymat1[1,c(1:3)]
mymat1[1,] #1행의 모든열열
mymat1[,1] #1열의 모든값값
#1행과 3행을 뺀 데이터
mymat1[-c(1,3),]
#미니실습1 - 2행부터 4행까지 출력(단,2번,3번컬럼만)
mymat1[2:4,c(2,3)]
#cbind는 컬럼을 추가하는 함수 - 값이 부족하
addmymat1 <- cbind(mymat1,c(1,11,111,1111))
addmymat1 <- cbind(mymat1,c(1,11,111,1111))
addmymat1
addmymat2 <- rbind(mymat1,c(1,11,111,1111))
addmymat2 <- rbind(mymat1,c(1,11,111,1111))
addmymat2
